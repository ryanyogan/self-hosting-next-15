# Name of your application. Used to uniquely configure containers.
# service: my-app

# # Name of the container image.
# image: my-user/my-app

# # Deploy to these servers.
# servers:
#   web:
#     - 192.168.0.1
# job:
#   hosts:
#     - 192.168.0.1
#   cmd: bin/jobs

service: self-hosting-next-15
image: ryanyogan/self-hosting-next-15

servers:
  web:
    - 146.190.71.35

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption.
proxy:
  ssl: true
  host: echlon.io
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: ryanyogan

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password: ryan0313

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379

#     directories:
#       - data:/data

# registry:
#   username: ryanyogan
#   password: ryan0313

env:
  # clear:
  #   POSTGRES_USER: myuser
  #   POSTGRES_DB: mydatabase
  #   DOMAIN_NAME: echlon.io
  #   EMAIL: ryanyogan@gmail.com
  secret:
    # - POSTGRES_PASSWORD
    - SECRET_KEY
    - NEXT_PUBLIC_SAFE_KEY
    # - DATABASE_URL
    # - DATABASE_URL_EXTERNAL

volumes:
  - /var/lib/postgresql/data:/var/lib/postgresql/data
  - /etc/letsencrypt:/etc/letsencrypt
  - /swapfile:/swapfile
# accessories:
#   db:
#     image: postgres:latest
#     port: 5432
#     env:
#       clear:
#         POSTGRES_USER: myuser
#         POSTGRES_DB: mydatabase
#       secret:
#         - POSTGRES_PASSWORD
#     volumes:
#       - /var/lib/postgresql/data:/var/lib/postgresql/data

# builder:
#   multiarch: false

healthcheck:
  path: /api/healthz
# traefik:
#   options:
#     publish-port: 80,443
#     acme-email: ryanyogan@gmail.com
#     acme-domains: echlon.io

# hooks:
#   pre-setup:
#     - apt update && apt upgrade -y
#     - apt install apt-transport-https ca-certificates curl software-properties-common -y
#     - fallocate -l 1G /swapfile
#     - chmod 600 /swapfile
#     - mkswap /swapfile
#     - swapon /swapfile
#     - echo '/swapfile none swap sw 0 0' | tee -a /etc/fstab
#   post-setup:
#     - docker network create myapp_network || true
